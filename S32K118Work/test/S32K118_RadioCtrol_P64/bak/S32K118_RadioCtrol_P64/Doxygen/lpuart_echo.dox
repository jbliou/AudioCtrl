/*!
    @page lpuart_echo_s32k118_group LPUART Echo 
    @brief Example application using the LPUART driver
    
    ## Application description ##
    ______
    The purpose of this demo application is to show you how to use the Low Power UART from the S32K118 CPU using the S32 SDK API.
    The application will first echo a brief message describing the normal behavior, then it will echo back any string that is sent from the console.
    If 'Hello Board' is sent, the board will reply with 'Hello World'.

    @note Due to limited RAM size, this example contains only one build configuration for target flash memory (and the associated debug configuration).

    ## Prerequisites ##
    ______
    To run the example you will need to have the following items:
    - 1 S32K118 board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    
    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K118EVB-Q064
    
    ## Hardware Wiring ##
    ______
    The following connections must be done to for this example application to work:
    
    PIN FUNCTION                | S32K118EVB-Q100               
    ----------------------------|-------------------------------
    LPUART0 TX (\b PTB1)	    | UART_TX - wired on the board 	
    LPUART0 RX (\b PTB0)        | UART_RX - wired on the board  
    
    ## How to run ##
    ______
    
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b lpuart_echo_s32k118. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b lpuart_echo_s32k118). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Click the \b build button(@image hammer.png) and wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name                               | Description
     -------------------------------------------------|-----------------------------------------------------------
      \b lpuart_echo_s32k118_debug_flash_pemicro      | Debug the FLASH configuration using PEMicro debuggers 
      \b lpuart_echo_s32k118_debug_flash_jlink        | Debug the FLASH configuration using JLink debuggers 
    \n Select the debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.
    
    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
    
    ## Notes ##
    ______
    For this example it is necessary to open a terminal emulator and configure it with:
    -   115200 baud
    -   One stop bit
    -   No parity
    -   No flow control
    -   '\\n' line ending
*/

